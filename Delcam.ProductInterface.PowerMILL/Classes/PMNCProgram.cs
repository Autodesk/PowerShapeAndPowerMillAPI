// **********************************************************************
// *         © COPYRIGHT 2018 Autodesk, Inc.All Rights Reserved         *
// *                                                                    *
// *  Use of this software is subject to the terms of the Autodesk      *
// *  license agreement provided at the time of installation            *
// *  or download, or which otherwise accompanies this software         *
// *  in either electronic or hard copy form.                           *
// **********************************************************************

using System;
using System.Collections.Generic;

namespace Autodesk.ProductInterface.PowerMILL
{
    /// <summary>
    /// Captures a NCProgram object in PowerMILL
    /// </summary>
    public class PMNCProgram : PMEntity
    {
        #region Constructors

        /// <summary>
        /// Initialises the item.
        /// </summary>
        /// <param name="powerMILL">The base instance to interact with PowerMILL.</param>
        internal PMNCProgram(PMAutomation powerMILL) : base(powerMILL)
        {
        }

        /// <summary>
        /// Initialises the item.
        /// </summary>
        /// <param name="powerMILL">The base instance to interact with PowerMILL.</param>
        /// <param name="name">The new instance name.</param>
        internal PMNCProgram(PMAutomation powerMILL, string name) : base(powerMILL, name)
        {
        }

        #endregion

        #region Properties

        internal static string NC_PROGRAM_IDENTIFIER = "NCPROGRAM";

        /// <summary>
        /// Gets the identifier PowerMILL uses to identify this type of entity
        /// </summary>
        internal override string Identifier
        {
            get { return NC_PROGRAM_IDENTIFIER; }
        }

        /// <summary>
        /// Gets and sets in PowerMill the Output file name generated by the NC program.
        /// </summary>
        public string OutputFileName
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx("PRINT PAR terse \"entity('NCPROGRAM', '" + Name + "').FileName\"")
                             .ToString()
                             .Trim();
                string filename = result.Replace(((char) 13).ToString(), string.Empty);
                filename = filename.Replace(((char) 10).ToString(), string.Empty);
                return filename;
            }
            set
            {
                string cmd = string.Format("EDIT NCPROGRAM '{0}' FILENAME FILESAVE \"{1}\"", Name, value);
                PowerMill.DoCommand(cmd);
            }
        }

        /// <summary>
        /// Gets and sets in PowerMill the Option File name assigned to the NC program.
        /// </summary>
        public string MachineOptionFileName
        {
            get
            {
                string optFileName =
                    PowerMill.DoCommandEx("PRINT PAR terse \"entity('NCPROGRAM', '" + Name + "').OptionName\"")
                             .ToString()
                             .Trim();
                return optFileName;
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' TAPEOPTIONS \"{1}\"", Name, value)); }
        }

        /// <summary>
        /// Gets and sets in PowerMill the ouput workplane.
        /// </summary>
        public string OutputWorkplaneName
        {
            get
            {
                string workplane =
                    PowerMill.DoCommandEx(
                                 string.Format("PRINT PAR terse \"entity('NCPROGRAM', '{0}').OutputWorkplane.Name\"", Name))
                             .ToString()
                             .Trim();
                return workplane;
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' SET WORKPLANE \"{1}\"", Name, value)); }
        }

        /// <summary>
        /// Gets and sets in PowerMill the program number.
        /// </summary>
        public int ProgramNumber
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx("PRINT PAR terse \"entity('NCPROGRAM', '" + Name + "').Number\"")
                             .ToString()
                             .Trim();
                int number = int.Parse(result);
                return number;
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' NUMBER \"{1}\"", Name, value)); }
        }

        /// <summary>
        /// Gets and sets in PowerMill the part number.
        /// </summary>
        public string PartName
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx(string.Format("PRINT PAR terse \"entity('NCPROGRAM', '{0}').PartName\"",
                                                        Name)).ToString().Trim();
                return result;
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' PARTNAME \"{1}\"", Name, value)); }
        }

        /// <summary>
        /// Gets and sets in PowerMill the tool coordinates.
        /// </summary>
        public ToolValues ToolValue
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx(string.Format(
                                              "PRINT PAR terse \"entity('NCPROGRAM', '{0}').CoordinateType\"",
                                              Name)).ToString().Trim();
                return (ToolValues) Enum.Parse(typeof(ToolValues), result, true);
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' TOOLCOORDS {1}", Name, value)); }
        }

        /// <summary>
        /// Gets the list of all the toolpaths that are in this NCProgram.
        /// </summary>
        public List<PMToolpath> Toolpaths
        {
            get
            {
                // Get the list of toolpaths that are in the NCProgram
                string toolpathsList = PowerMill.DoCommandEx("EDIT NCPROGRAM '" + Name + "' LIST").ToString();
                toolpathsList = toolpathsList.Replace(((char) 13).ToString(), string.Empty);
                string[] splitList = toolpathsList.Split((char) 10);
                List<PMToolpath> returnToolpaths = new List<PMToolpath>();
                // If no option file is specified then the toolpath entries start a row earlier
                var startIndex = 4;
                if (!splitList[3].Trim().StartsWith("Option"))
                {
                    startIndex = 3;
                }
                for (int i = startIndex; i <= splitList.Length - 1; i++)
                {
                    if (!string.IsNullOrEmpty(splitList[i].Trim()))
                    {
                        foreach (PMToolpath toolpath in PowerMill.ActiveProject.Toolpaths)
                        {
                            if (toolpath.Name == splitList[i].Trim())
                            {
                                returnToolpaths.Add(toolpath);
                                break; // TODO: might not be correct. Was : Exit For
                            }
                        }
                    }
                    else
                    {
                        break; // TODO: might not be correct. Was : Exit For
                    }
                }
                return returnToolpaths;
            }
        }

        /// <summary>
        /// Gets and sets the tool change mode.
        /// </summary>
        public ToolChanges ToolChange
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx(string.Format(
                                              "PRINT PAR terse \"entity('NCPROGRAM', '{0}').ToolChangeMode\"",
                                              Name)).ToString().Trim();
                if (result == "tool")
                {
                    result = "new";
                }
                return (ToolChanges) Enum.Parse(typeof(ToolChanges), result, true);
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' TOOLCHANGE {1}", Name, value)); }
        }

        /// <summary>
        /// Gets and sets the tool numbering in PowerMill.
        /// </summary>
        public ToolNumberings ToolNumbering
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx(
                                 string.Format("PRINT PAR terse \"entity('NCPROGRAM', '{0}').ToolNumberCalculation\"", Name))
                             .ToString()
                             .Trim();
                return (ToolNumberings) Enum.Parse(typeof(ToolNumberings), result, true);
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' LOADTOOL {1}", Name, value)); }
        }

        /// <summary>
        /// Gets and sets the tool change position in PowerMill.
        /// </summary>
        public ToolChangePositions ToolChangePosition
        {
            get
            {
                string result =
                    PowerMill.DoCommandEx(
                                 string.Format("PRINT PAR terse \"entity('NCPROGRAM', '{0}').ToolChangePosition\"", Name))
                             .ToString()
                             .Trim();
                return (ToolChangePositions) Enum.Parse(typeof(ToolChangePositions), result, true);
            }
            set { PowerMill.DoCommand(string.Format("EDIT NCPROGRAM '{0}' CHANGE {1}", Name, value)); }
        }

        #endregion

        #region Operations

        /// <summary>
        /// Deletes program. It also update PowerMill.
        /// </summary>
        public override void Delete()
        {
            PowerMill.ActiveProject.NCPrograms.Remove(this);
        }

        /// <summary>
        /// Adds a toolpath to an exist NC program.
        /// </summary>
        /// <param name="toolpathName">The name of the toolpath to add.</param>
        /// <param name="position">The toolpath position on the NC program.</param>
        private void AddToolpathAtPosition(string toolpathName, string position)
        {
            PowerMill.DoCommand("EDIT NCPROGRAM '" + Name + "' INSERT Toolpath '" + toolpathName + "' " + position);
        }

        /// <summary>
        /// Adds a Toolpath to the NC Program.
        /// </summary>
        /// <param name="toolpathName">The toolpath name to add.</param>
        /// <param name="insertAtFront">If true it will to insert at front.</param>
        /// <param name="insertAfterIndexPosition">The index position aftger which the Toolpath will be added.</param>
        /// <remarks>Does not check that toolpath exists or already added</remarks>
        public void AddToolpath(string toolpathName, bool insertAtFront = false, int insertAfterIndexPosition = -1)
        {
            string position = null;
            if (insertAtFront)
            {
                position = "FIRST";
            }
            else
            {
                position = "LAST";
            }
            if (insertAfterIndexPosition > -1)
            {
                position = "AFTER ITEM " + insertAfterIndexPosition;
            }
            AddToolpathAtPosition(toolpathName, position);
        }

        /// <summary>
        /// Removes toolpath from NC program in PowerMill.
        /// </summary>
        /// <param name="toolpathName">The toolpath name.</param>
        /// <remarks></remarks>
        public void RemoveToolpath(string toolpathName)
        {
            PowerMill.DoCommand("EDIT NCPROGRAM '" + Name + "' TOOLPATH '" + toolpathName + "' DELETE");
        }

        /// <summary>
        /// Writes the NCProgram.  Post-processor and option file must have been specified already.
        /// </summary>
        public void Write()
        {
            // Write out the NCProgram
            PowerMill.DoCommand("ACTIVATE NCPROGRAM \"" + Name + "\"", "KEEP NCPROGRAM \"" + Name + "\"");
        }

        #endregion
    }
}